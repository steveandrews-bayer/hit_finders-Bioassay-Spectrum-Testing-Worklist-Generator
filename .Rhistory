library(gtools)
#Global Variables
wellNum <- 6 #Used to track location in plate. Will be updated throughout program
wellLetter <- "A" #Used to track location in plate. Will be updated throughout program
wellNumReset <- 2 #constant
debugList1 = list()
debugList2 = list()
debugList3 = list()
debugList4 = list()
targetPPMs_normal = c(1000, 250, 50, 10)
targetPPMS_hemip = c(2000, 500, 100, 20)
targetPPMS_lygus = c(4000, 1000, 200, 40)
targetPPMs = list(targetPPMs_normal, targetPPMS_hemip, targetPPMS_lygus)
#if protein volume <5 uL, then elimate entire line from worklist (plan B)
#what would it look like if we had a diff source concentration for the lowest concentration?
#can we have 2 source wells for each? (Plan A)
#review the logs
insectGroupNames <- list('normal', 'hemip', 'lygus')
maxPlates <- list(20, 2, 2)
startingHighConcs <- list(2000, 4000, 8000)
names(startingHighConcs) <- insectGroupNames
startingLowConcs <- list(1000, 2000, 2000)
names(startingLowConcs) <- insectGroupNames
targetVolumes <- list (1200, 1200, 600)
names(targetVolumes) <- insectGroupNames
worklistHeader <- list(
"Source Plate",
"Source Well",
"Protein Volume",
"Buffer Volume",
"Destination Plate",
"Destination Well",
"Source Plate ID",
"Destination Plate ID",
"Clone ID",
"Observed_Construct_Name",
"SRC_ID",
"Group Id",
"Source Type",
"Rep",
"Conc",
"Template"
)
get_well<- function()
{
assign("wellNum", wellNum + 1, envir = .GlobalEnv) #required to update global variable "wellNum"
if(wellNum > 11)
{
wellLetterAscii <- asc(wellLetter)
assign("wellLetter", chr(wellLetterAscii+1), envir = .GlobalEnv)
assign("wellNum", wellNumReset, envir = .GlobalEnv)
}
wellName <-paste(wellLetter, wellNum, sep = "")
return(wellName)
}
add_protein_to_plate <-function(proteinNumber, dilutionNumber, proteinName)
{
highConcSourceWells <- c("A1", "A2", "B1", "B2", "C1", "C2", "D1", "D2")
lowConcSourceWells <- c("A3", "A4", "B3", "B4", "C3", "C4", "D3", "D4")
well = list()
well$sourcePlate <- "SpinVessel"
if(dilutionNumber = 4)
library(gtools)
#Global Variables
wellNum <- 6 #Used to track location in plate. Will be updated throughout program
wellLetter <- "A" #Used to track location in plate. Will be updated throughout program
wellNumReset <- 2 #constant
debugList1 = list()
debugList2 = list()
debugList3 = list()
debugList4 = list()
targetPPMs_normal = c(1000, 250, 50, 10)
targetPPMS_hemip = c(2000, 500, 100, 20)
targetPPMS_lygus = c(4000, 1000, 200, 40)
targetPPMs = list(targetPPMs_normal, targetPPMS_hemip, targetPPMS_lygus)
#if protein volume <5 uL, then elimate entire line from worklist (plan B)
#what would it look like if we had a diff source concentration for the lowest concentration?
#can we have 2 source wells for each? (Plan A)
#review the logs
insectGroupNames <- list('normal', 'hemip', 'lygus')
maxPlates <- list(20, 2, 2)
startingHighConcs <- list(2000, 4000, 8000)
names(startingHighConcs) <- insectGroupNames
startingLowConcs <- list(1000, 2000, 2000)
names(startingLowConcs) <- insectGroupNames
targetVolumes <- list (1200, 1200, 600)
names(targetVolumes) <- insectGroupNames
worklistHeader <- list(
"Source Plate",
"Source Well",
"Protein Volume",
"Buffer Volume",
"Destination Plate",
"Destination Well",
"Source Plate ID",
"Destination Plate ID",
"Clone ID",
"Observed_Construct_Name",
"SRC_ID",
"Group Id",
"Source Type",
"Rep",
"Conc",
"Template"
)
get_well<- function()
{
assign("wellNum", wellNum + 1, envir = .GlobalEnv) #required to update global variable "wellNum"
if(wellNum > 11)
{
wellLetterAscii <- asc(wellLetter)
assign("wellLetter", chr(wellLetterAscii+1), envir = .GlobalEnv)
assign("wellNum", wellNumReset, envir = .GlobalEnv)
}
wellName <-paste(wellLetter, wellNum, sep = "")
return(wellName)
}
add_protein_to_plate <-function(proteinNumber, dilutionNumber, proteinName)
{
highConcSourceWells <- c("A1", "A2", "B1", "B2", "C1", "C2", "D1", "D2")
lowConcSourceWells <- c("A3", "A4", "B3", "B4", "C3", "C4", "D3", "D4")
well = list()
well$sourcePlate <- "SpinVessel"
if(dilutionNumber == 4)
{
well$sourceWell <- lowConcSourceWells[proteinNumber]
} else
{
well$sourceWell <- highConcSourceWells[proteinNumber]
}
well$proteinVol <- 0
well$bufferVol <- 0
well$destinationPlate <- "Plate"
well$wellName <- get_well()
well$sourcePlateID <- "SpinVessel_BC"
well$destinationPlateID <- "BC_Plate"
well$libID <- paste("LibID00000", proteinNumber, sep = "")
if(proteinName == "")
{
well$constructName <- paste("Protein000000", proteinNumber, sep = "")
} else{well$constructName <- proteinName}
well$srcID <- paste("10000", proteinNumber, sep = "")
well$groupID <- 1
well$sourceType <- 24
well$rep <- 1
well$conc <- dilutionNumber
well$template <- "ShinyAppGenerator"
return(well)
}
#Function initializes a destination plate with basic information
#This includes the protein name and the corresponding source well
#Volume information is calculated in a separate function
populate_plate_with_proteins <- function(numProteins, proteinNames)
{
myplate = list()
index = 1
for(i in 1:numProteins)
{
for(j in 1:4)
{
myplate$wells[[index]] <-  add_protein_to_plate(i,j,proteinNames[[i]])
index <- index + 1
}
}
return(myplate)
}
add_volumes <- function(plate, startingHighConc, startingLowConc, targetPPMsForInsect, targetVol)
{
dilNum <- 1
for(i in 1:length(plate$wells))
{
if(dilnum == 4)
{
dilFactor <- startingLowConc/targetPPMsForInsect[[dilNum]]
} else
{
dilFactor <- startingHighConc/targetPPMsForInsect[[dilNum]]
}
proteinVol <- targetVol/dilFactor
names(plate) <- 'wells'
bufferVol <- targetVol - proteinVol
plate$wells[[i]]$proteinVol <- proteinVol
plate$wells[[i]]$bufferVol <- bufferVol
if(dilNum < 4){  dilNum <- dilNum + 1 #move to next dilution
} else { dilNum <- 1} #reset dilution
}
print(plate)
return(plate)
}
update_plate_number <-function(plate, number)
{
for(i in 1:length(plate))
{
#print(i)
plate[[i]]$destinationPlate <- paste("Plate", number,sep="")
plate[[i]]$destinationPlateID <- paste("BC_Plate", number,sep="")
}
return(plate)
}
remove_extra_plates <- function(plate, numberOfPlates)
{
if(numberOfPlates == 0)
{
newplate <- list()
}else
{
plateNames <- vector('list', length = numberOfPlates)
for(i in 1:numberOfPlates)
{
plateNames[i] <- paste("Plate", i, sep="")
}
#print(plateNames)
assign("debugList1", plate, envir = .GlobalEnv)
newplate <- plate[(plate$destinationPlate %in% plateNames),]
#assign("debugList2", newplate, envir = .GlobalEnv)
}
return(newplate)
}
create_worklists <- function(numProteins, numNormalPlates, numHemipPlates, numLygusPlates, proteinNames)
{
#Create list of number of each types of plates to create
numPlates <- list(numNormalPlates, numHemipPlates, numLygusPlates)
#Initialize empty list variables
allPlates <- list()
worklist <- list()
#Create a template destination plate with protein name
#This plate will be used to generate info for all subsequent plates
templatePlate <- populate_plate_with_proteins(numProteins, proteinNames)
#Create an empty list that will contain the first plate for each insect type
#The first plate will contain all necessary info for the worklist
#This plate then will be copied and the plate# updated for each subsequent replicate
startingPlates <- vector(mode = 'list', length = length(numPlates))
listNames <- rep('wells', length(numPlates))
for(insectType in 1:length(startingPlates))
{
startingPlates[insectType] <- add_volumes(plate, startingHighConcs[[insectType]], startingLowConcs[[insectType]], targetPPMs[insectType], targetVolumes[[insectType]])
}
names(startingPlates) <- listNames
assign("debugList1", startingPlates, envir = .GlobalEnv)
for(i in 1:length(maxPlates))
{
for(j in seq(1, maxPlates[[i]], by = 1))
{
tmpPlate <- list()
tmpPlate <- lapply(startingPlates[i], update_plate_number, j)
if(j == 1)
{
allPlates[[i]] <- as.data.frame(do.call(rbind, tmpPlate$wells))
} else
{
tempDF <- as.data.frame(do.call(rbind, tmpPlate$wells))
allPlates[[i]] <- rbind(allPlates[[i]], tempDF)
}
}
}
assign("debugList2", allPlates, envir = .GlobalEnv)
for(i in 1:length(numPlates))
{
if(numPlates[[i]] > 0)
{
worklist[i] <- lapply(allPlates[i], remove_extra_plates, numberOfPlates = numPlates[[i]])
}else(worklist[[i]] <- vector('list', length = length(worklistHeader)))
}
assign("debugList3", worklist, envir = .GlobalEnv)
lapply(worklist, setNames, nm = worklistHeader)
for(i in 1:length(worklist))
{
names(worklist[[i]]) <- worklistHeader
}
assign("debugList4", worklist, envir = .GlobalEnv)
return(worklist)
}
shiny::runApp('~/LPP Bioassay App/App')
runApp('~/LPP Bioassay App/App')
runApp('~/LPP Bioassay App/App')
runApp('~/LPP Bioassay App/App')
runApp('~/LPP Bioassay App/App')
runApp('~/LPP Bioassay App/App')
runApp('~/LPP Bioassay App/App')
runApp('~/LPP Bioassay App/App')
runApp('~/LPP Bioassay App/App')
runApp('~/LPP Bioassay App/App')
install.packages("rcpp")
library(Rcpp)
install.packages("Rcpp")
shiny::runApp('~/LPP Bioassay App/App')
runApp('~/LPP Bioassay App/App')
list.files()
setwd("C:\Users\gmyee\OneDrive - Bayer\Personal Data\LPP Bioassay App\App")
setwd("C:\\Users\\gmyee\\OneDrive - Bayer\\Personal Data\\LPP Bioassay App\\App")
list.files()
rsconnect::writeManifest()
list.files()
